<template type="text/x-template" id="app-main">
  <div class="row">
    <div class="col s12">
      <ul class="tabs">
        <li class="tab col s6"><a href="#tab1" class="grey-text">List</a></li>
        <li class="tab col s6"><a href="#tab2" class="grey-text">Create</a></li>
      </ul>
    </div class="lime">
    <div id="tab1" class="col s12">
      <table class="striped">
        <thead>
          <tr>
            <th>ID</th>
            <th>Sub Domain</th>
            <th>Branch</th>
            <th>Docker Image</th>
            <th>Updated At</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="c of Containers">
            <td>{{ c.id | omitContainerId }}</td>
            <td>{{ c.subdomain }}</td>
            <td>{{ c.branch }}</td>
            <td>{{ c.image }}</td>
            <td>{{ c.updated_at }}</td>
            <td>
              <a class="waves-effect btn modal-trigger" :href='["#del-" + c.subdomain]'>
                <i class="material-icons">delete</i>
              </a>
              <div :id='["del-" + c.subdomain]' class="modal">
                <div class="modal-content">
                  <p>Are you sure you want to delete? (subdomain: <b>{{ c.subdomain }}</b>)</p>
                </div>
                <div class="modal-footer">
                  <a class="modal-action modal-close waves-effect waves-green btn-flat">CANCEL</a>
                  <a @click="postDestroy(c.subdomain)" class="modal-action modal-close waves-effect waves-green btn">DELETE</a>
                </div>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <div id="tab2" class="col s12">
      <div class="create-form container">
        <div class="col s12 m12">
          <div class="card">
            <div class="card-content">
              <span class="card-title"><b>Create Docker Container</b></span>
              <form class="">
                <div class="row">
                  <div class="input-field col s12">
                    <input v-model="InputSubdomain" placeholder="Input sub domain name." id="subdomain" type="text" class="validate" required>
                    <label for="subdomain">Sub Domain</label>
                  </div>
                </div>
                <div class="row">
                  <div class="input-field col s12">
                    <input v-model="InputImage" placeholder="Input docker image name." id="image" type="text" class="validate" required>
                    <label for="image">Docker Image</label>
                  </div>
                </div>
                <div class="row">
                  <div class="input-field col s12">
                    <input v-model="InputBranch" placeholder="Input git branch name." id="branch" type="text" class="validate" required>
                    <label for="branch">Git Branch</label>
                  </div>
                </div>
              </form>
            </div>
            <div class="card-action right-align">
              <button @click="postLaunch" class="btn waves-effect lime accent-2 brown-text">Create</button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div id="loading" class="modal">
      <div class="modal-content left-align">
        <p>{{ LoadingMessage }}</p>
        <div class="center-align">
          <div class="preloader-wrapper big active">
            <div class="spinner-layer spinner-blue">
              <div class="circle-clipper left">
                <div class="circle"></div>
              </div>
            </div>
            <div class="spinner-layer spinner-red">
              <div class="circle-clipper left">
                <div class="circle"></div>
              </div>
            </div>
            <div class="spinner-layer spinner-yellow">
              <div class="circle-clipper left">
                <div class="circle"></div>
              </div>
            </div>
            <div class="spinner-layer spinner-green">
              <div class="circle-clipper left">
                <div class="circle"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <a class="modal-action modal-close waves-effect waves-green btn-flat">CLOSE</a>
      </div>
    </div>
    <div id="error-modal" class="modal">
      <div class="modal-content left-align">
        <b>Error has occurred (´；ω；｀)</b>
        <p>Status Code: {{ ErrorCode }}</p>
        <p>Message:</p>
        <p>{{ ErrorMessage }}</p>
      </div>
      <div class="modal-footer">
        <a class="modal-action modal-close waves-effect waves-green btn-flat">CLOSE</a>
      </div>
    </div>
  </div>
</template>

<script>
  var c = Vue.component('main', {
    template: '#app-main',
    data () {
      return {
        Containers: [],
        InputImage: '',
        InputBranch: '',
        InputSubdomain: '',
        LoadingMessage: '',
        ErrorCode: '',
        ErrorMessage: '',
      }
    },
    beforeMount() {
      this.getList()
    },
    filters: {
      omitContainerId: (id) => {
        return id.substr(0, 12)
      }
    },
    methods: {
      getList() {
        this.request('GET', '/list', null, (res) => {
          this.Containers = res[0].data
        })
      },
      postDestroy(subdomain) {
        this.LoadingMessage = 'Container is terminating...'
        $('#loading').modal('open')
        let func = this.request('POST', '/destroy', {'subdomain': subdomain}, (res) => {
          $('#loading').modal('close')
          this.getList()
        })
        setTimeout(func, 2000)
      },
      postLaunch() {
        this.LoadingMessage = 'Container is launching...'
        $('#loading').modal('open')
        let req = {
          'subdomain': this.InputSubdomain,
          'branch': this.InputBranch,
          'image': this.InputImage,
        }
        let func = this.request('POST', '/launch', req, (res) => {
          $('#loading').modal('close')
          $('ul.tabs').tabs('select_tab', 'tab1');
          this.getList()
          this.InputSubdomain = ''
          this.InputBranch = ''
          this.InputImage = ''
        })
        setTimeout(func, 2000)
      },
      request(method, path, req, callable) {
        fetch(path, {
          header: {
            'Content-Type': 'application/json'
          },
          method: method,
          body: method === 'GET' ? null : JSON.stringify(req)
        }).then((res) => {
          if (!res.ok) {
            res.json().then((res) => {
              data = res[0]
              this.ErrorCode = data.code
              this.ErrorMessage = data.message_debug
              $('#loading').modal('close')
              $('#error-modal').modal('open')
              console.error(data)
            })
            return
          }
          res.json().then((res) => {
            callable(res)
          })
        })
      }
    },
  })

  var vm = new Vue({
    el: '#app',

    components: {
      'app-main': c
    },
  })
</script>
